{"version":3,"sources":["pages/home.js","App.js","serviceWorker.js","index.js"],"names":["Home","class","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uNA6DeA,G,UA1DF,kBACT,oCACI,yBAAKC,MAAM,0CACX,yBAAKA,MAAM,aACP,yBAAKA,MAAM,oBACP,wBAAIA,MAAM,oBAAV,sCAGA,uBAAGA,MAAM,uBAAT,2FAOR,yBAAKA,MAAM,0CACP,iKAIA,sQAQJ,yBAAKA,MAAM,iCACP,yBAAKA,MAAM,0BACP,yBAAKA,MAAM,oBACP,wBAAIA,MAAM,oBAAV,oBACA,uBAAGA,MAAM,uBAAT,kFAQZ,yBAAKA,MAAM,yCACP,yBAAKA,MAAM,yBACP,iKAKA,0QCvCDC,MARf,WACI,OACI,yBAAKC,UAAU,OACX,kBAAC,EAAD,QCMQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1b323511.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../dist/css/main.css\";\r\n\r\nconst Home = () => (\r\n    <>\r\n        <div class=\"home__image home__image--landing-page\"></div>\r\n        <div class=\"home__box\">\r\n            <div class=\"home__box--panel\">\r\n                <h2 class=\"home__box--title\">\r\n                    Hello everyone, we are the Sewcase\r\n                </h2>\r\n                <p class=\"home__box--subtitle\">\r\n                    We are doing some cool stuff and we share an amazing\r\n                    experience @Dokomi and @Gamescom\r\n                </p>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"home__container home__container--light\">\r\n            <p>\r\n                The Summoner Sewcase is a Fan created initiative, that offers\r\n                League of Legends Cosplay related content from Fans – for Fans!\r\n            </p>\r\n            <p>\r\n                We run booths at Events like DoKomi and GamesCom as well as On-\r\n                & Offline Cosplay competitions. Our goal is to create a place\r\n                where League of Legends Fans and Cosplayers can have a great\r\n                time together and experience something new!\r\n            </p>\r\n        </div>\r\n\r\n        <div class=\"home__image home__image--team\">\r\n            <div class=\"home__box--full-height\">\r\n                <div class=\"home__box--panel\">\r\n                    <h2 class=\"home__box--title\">This is our Team</h2>\r\n                    <p class=\"home__box--subtitle\">\r\n                        Feel free to ask us anything during the convention and\r\n                        on our social media.\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"home__container home__container--dark\">\r\n            <div class=\"home__container--half\">\r\n                <p>\r\n                    The Summoner Sewcase is a Fan created initiative, that\r\n                    offers League of Legends Cosplay related content from Fans –\r\n                    for Fans!\r\n                </p>\r\n                <p>\r\n                    We run booths at Events like DoKomi and GamesCom as well as\r\n                    On- & Offline Cosplay competitions. Our goal is to create a\r\n                    place where League of Legends Fans and Cosplayers can have a\r\n                    great time together and experience something new!\r\n                </p>\r\n            </div>\r\n        </div>\r\n    </>\r\n);\r\n\r\nexport default Home;\r\n","import React from \"react\";\nimport Home from \"./pages/home\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Home/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}